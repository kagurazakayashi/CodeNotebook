from re import A
import numpy as np # pip install numpy
import matplotlib.pyplot as plt # pip install matplotlib
import tensorflow as tf # pip install tensorflow
import os
from tensorflow.python.ops.gen_data_flow_ops import barrier_close

os.environ["CUDA_VISIBLE_DEVICES"] = " " # 选择 GPU，留空 CPU

a:list = [[1,332,332*332],[1,331,331*331],[1,330,330*330],[1,329,329*329],[1,328,328*328],[1,326,326*326],[1,324,324*324],[1,321,321*321],[1,320,320*320],[1,314,314*314],[1,310,310*310],[1,310,310*310],[1,315,315*315],[1,317,317*317],[1,317,317*317],[1,315,315*315],[1,313,313*313],[1,312,312*312],[1,310,310*310],[1,310,310*310],[1,310,310*310],[1,305,305*305],[1,303,303*303],[1,302,302*302],[1,303,303*303],[1,304,304*304],[1,301,301*301],[1,299,299*299],[1,299,299*299],[1,298,298*298],[1,299,299*299],[1,295,295*295],[1,292,292*292],[1,289,289*289],[1,290,290*290],[1,291,291*291],[1,292,292*292],[1,290,290*290],[1,287,287*287],[1,284,284*284],[1,281,281*281],[1,281,281*281],[1,280,280*280],[1,280,280*280],[1,281,281*281],[1,279,279*279],[1,277,277*277],[1,272,272*272],[1,273,273*273],[1,275,275*275],[1,278,278*278],[1,277,277*277],[1,276,276*276],[1,274,274*274],[1,274,274*274],[1,275,275*275],[1,273,273*273],[1,269,269*269],[1,265,265*265],[1,264,264*264],[1,263,263*263],[1,263,263*263],[1,262,262*262],[1,263,263*263],[1,262,262*262],[1,261,261*261],[1,259,259*259],[1,257,257*257],[1,255,255*255],[1,254,254*254],[1,255,255*255],[1,255,255*255],[1,255,255*255],[1,251,251*251],[1,249,249*249],[1,248,248*248],[1,247,247*247],[1,243,243*243],[1,231,231*231],[1,218,218*218],[1,208,208*208],[1,202,202*202],[1,203,203*203],[1,203,203*203],[1,205,205*205],[1,205,205*205],[1,204,204*204],[1,202,202*202],[1,202,202*202],[1,203,203*203],[1,203,203*203],[1,203,203*203],[1,204,204*204],[1,195,195*195],[1,174,174*174],[1,157,157*157],[1,139,139*139],[1,136,136*136],[1,136,136*136],[1,135,135*135],[1,134,134*134],[1,133,133*133],[1,85,85*85],[1,86,86*86],[1,85,85*85],[1,83,83*83],[1,79,79*79],[1,68,68*68],[1,62,62*62],[1,56,56*56],[1,56,56*56],[1,55,55*55],[1,54,54*54],[1,52,52*52],[1,53,53*53],[1,53,53*53],[1,52,52*52],[1,51,51*51],[1,51,51*51],[1,51,51*51],[1,51,51*51],[1,51,51*51],[1,45,45*45],[1,45,45*45],[1,45,45*45],[1,45,45*45],[1,45,45*45],[1,44,44*44],[1,45,45*45],[1,45,45*45],[1,45,45*45],[1,45,45*45],[1,45,45*45],[1,45,45*45],[1,45,45*45],[1,45,45*45],[1,45,45*45],[1,45,45*45],[1,44,44*44],[1,44,44*44],[1,46,46*46],[1,45,45*45],[1,44,44*44],[1,43,43*43],[1,41,41*41],[1,40,40*40],[1,39,39*39],[1,39,39*39],[1,39,39*39],[1,39,39*39],[1,37,37*37],[1,36,36*36],[1,35,35*35],[1,34,34*34],[1,33,33*33],[1,31,31*31],[1,30,30*30],[1,29,29*29],[1,29,29*29],[1,27,27*27],[1,27,27*27],[1,26,26*26],[1,25,25*25],[1,24,24*24],[1,23,23*23],[1,23,23*23],[1,21,21*21],[1,19,19*19],[1,19,19*19],[1,18,18*18],[1,17,17*17],[1,15,15*15],[1,15,15*15],[1,15,15*15],[1,16,16*16],[1,15,15*15],[1,14,14*14],[1,13,13*13],[1,12,12*12],[1,10,10*10],[1,10,10*10],[1,9,9*9],[1,8,8*8],[1,7,7*7],[1,7,7*7],[1,6,6*6],[1,6,6*6],[1,5,5*5],[1,5,5*5],[1,5,5*5],[1,5,5*5],[1,5,5*5],[1,4,4*4],[1,4,4*4],[1,4,4*4],[1,3,3*3],[1,3,3*3],[1,1,1*1],[1,1,1*1],[1,1,1*1],[1,1,1*1],[1,1,1*1],[1,0,0*0],[1,0,0*0],[1,1,1*1],[1,1,1*1],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,1,1*1],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,1,1*1],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,1,1*1],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0],[1,0,0*0]]
a:np.ndarray = np.array(a)
a:np.ndarray = a.astype(float)
b:list = [[352],[349],[348],[345],[343],[341],[340],[338],[336],[334],[332],[330],[328],[326],[325],[323],[321],[320],[318],[316],[314],[312],[310],[309],[307],[306],[304],[302],[301],[299],[297],[296],[294],[292],[291],[289],[288],[286],[285],[284],[282],[281],[279],[277],[276],[274],[273],[271],[270],[269],[267],[266],[264],[263],[262],[260],[259],[257],[256],[255],[253],[252],[250],[249],[248],[247],[246],[244],[243],[242],[240],[239],[237],[236],[235],[233],[232],[230],[218],[204],[190],[187],[186],[185],[184],[183],[182],[181],[180],[179],[178],[177],[176],[162],[143],[122],[113],[112],[111],[110],[110],[110],[67],[66],[66],[65],[61],[54],[47],[43],[43],[43],[42],[42],[42],[42],[41],[41],[41],[41],[40],[40],[35],[35],[35],[35],[35],[34],[34],[34],[34],[34],[34],[34],[33],[33],[33],[33],[33],[33],[32],[30],[30],[29],[29],[28],[27],[26],[25],[24],[23],[22],[22],[21],[20],[19],[19],[18],[17],[17],[16],[16],[15],[14],[14],[13],[13],[12],[12],[12],[12],[12],[10],[9],[9],[9],[9],[8],[8],[8],[8],[7],[7],[7],[6],[6],[6],[6],[5],[5],[5],[5],[5],[4],[4],[4],[4],[4],[4],[4],[3],[3],[3],[3],[3],[3],[3],[3],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[0]]
b:np.ndarray = np.array(b)
b:np.ndarray = b.astype(float)
data:tf.Tensor = tf.linalg.lstsq(a,b)
data:np.ndarray = data.numpy()
data:list = data.tolist()
# data:list = np.linalg.lstsq(a,b,rcond=None) # 不使用 TF
print(data)


def least_squares_method(x:list, y:list) -> list:
    """最小二乘法（least squares method），又称最小平方法，是一种数学优化建模方法。它通过最小化误差的平方和寻找数据的最佳函数匹配。"""
    x:np.ndarray = np.array(a)
    x:np.ndarray = x.astype(float)
    y:np.ndarray = np.array(a)
    y:np.ndarray = y.astype(float)
    data:tf.Tensor = tf.linalg.lstsq(x,y)
    data:np.ndarray = data.numpy()
    data:list = data.tolist()
    # data:list = np.linalg.lstsq(a,b,rcond=None) # 不使用 TF
    return data